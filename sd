#!/bin/bash

help_text=\
"NAME
	sd - create a shadow directory structure
	
SYNOPSIS
	sd
	sd [--filter] directory [directory ...]
	interactive_commands | sd
	non_interactive_command | sd [--filter]
	sd 'possibly interactive command'
	
DESCRIPTION
	Given a list of files and directories, create a directory structure
	in a temporary directory with links to the input files and directories.
	
RETURN
	The directory where the shadowing was done. This lets you use the 
	companion utility 'sdv' to start a program, possibly interactive, on
	the created directory and 'sdrm' which removes the temporary directory.

		I.E.: sd --filter ~/downloads/bikes | sdv ranger | sdrm

ARGUMENTS
	With no arguments, sd runs 'fzf -m' to select files and directories and
	creates the file structure in a temporary directory.
	
	If the argument are directories, 'find -type f' is used to generate the
	file list; if --filter is given as option, find's output is filtered 
	via 'fzf -m'.
	
	sd also accepts the list of files on stdin, if you generate the file
	list via a pipeline, make sure no interactive command is used.
	
	A user command to generate a list of files can be given to sd; the
	command can be interactive, quote the command to avoid interpolation.
	
		E.G.: sd 'find /home/directory/ -type f | fzf -m'
	
LINKING DIRECTORIES
	If a directory is given in the file list, previously linked files in
	that directory are removed and the directory is linked.
	
	If you want sparsely populated directories, don't pass directories, the
	examples above use '-type -f' to filter out directories.
	
	Also check option --no_link.

OPTIONS
	-d|--destination=s	destination directory, or one is created in /tmp
	--no_link		don't link file but create empty files
	-f|--filter		pass the input to 'fzf -m' for seletion
	--flat		the files are linked to basename.dirname

	--debug			display debug information
	-h|--help		display this help text
"

while :; do
	case $1 in
		-d|--destination)
			SD_DESTINATION=1 ;;
		--flat)
			SD_FLAT=1 ;;
		--no_link)
			SD_NO_LINK=1 ;;

		-f|--filter)
			SD_FILTER=" | fzf -m " ;;

		-d|--debug)
			SD_DEBUG=1 ;;

		-h|--help)
			echo "$help_text"
			exit 0 ;;
		-?*)
			printf 'sd: Error: Unknown option: %s\n' "$1" >&2
			exit 1 ;;
		*)
			break
	esac
	shift
done

set -e

[[ -n "$SD_DESTINATION" ]] && td="$SD_DESTINATION" || td=/tmp/$(mktemp -d -u sd_XXXXXXXX) 
[[ -n $SD_DEBUG ]] &&  echo sd: directory: "$td">&2
[[ -d "$td" ]] &&  echo sd: directory "$td" exists >&2
mkdir -p "$td" &>/dev/null

t=$td/.sd_input

if [[ ! -t 0 ]] ; then
	[[ -n $SD_DEBUG ]] && echo sd: using stdin >&2
	eval cat $SD_FILTER > "$t"
	echo >> "$t"
elif [[ -z "$1" ]] ; then
	[[ -n $SD_DEBUG ]] && echo sd: using command \"fzf -m\" >&2
	fzf -m > "$t"
	d=$(pwd)/
elif [[ -d "$1" ]] ; then
	[[ -n $SD_DEBUG ]] && echo sd: using command \"find $*\" >&2
	eval find $* -type f $SD_FILTER > "$t"
else
	[[ -n $SD_DEBUG ]] && echo sd: using command \"$*\" >&2
	eval $* > "$t"
fi

exec 3< $t

while read f <&3 ; do
	if [[ -n $f ]] ; then
		
		f=${f%/}
		[[ -n $SD_DEBUG ]] && echo sd: entry "$d$f" >&2
		
		[[ -d "$f" && -e "$td/$f" && -z $SD_NO_LINK ]] && rm -rf "$td/$f"
		
		if [[ -n $SD_FLAT ]] ; then
			destination="$td/"$(basename "$f").$(dirname "$f" | tr / _)
		else
			mkdir -p "$td/"$(dirname  "$f")
			destination="$td/$f"
		fi
		
		([[ -n $SD_NO_LINK ]] && touch "$destination") || ( $(ln -s "$d$f" "$destination") || true)
	fi
done

echo "$td"

